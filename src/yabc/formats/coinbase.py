"""
Code for importing data from a report generated by the exchange Coinbase.

YABC is not affiliated with the company Coinbase or any of its products.
"""
import csv

from yabc import transaction


def from_coinbase(f):
    """
    :param f: a file-like object with csv data.
    @return dictionaries with coinbase fields
    """
    f.seek(0)
    rawcsv = [i for i in csv.reader(f)]
    if len(rawcsv) < 4:
        raise RuntimeError("Invalid CSV file, not enough rows.")
    fieldnames = rawcsv[4]
    if not fieldnames[-2].count("Coinbase") > 0:
        raise RuntimeError("Invalid coinbase file encountered")
    fieldnames[-1] = "Bitcoin Hash"
    fieldnames[-2] = "Coinbase ID"
    f.seek(0)
    transactions = [i for i in csv.DictReader(f, fieldnames)]
    # Previously, coinbase column 4 had timestamp.  Documents generated as
    # of April 2019 have it as the first column.
    # First meaningful row is 4; 3 has headers so we can check that.
    assert transactions[3]["Timestamp"] == "Timestamp"
    transactions = transactions[4:]
    for i in transactions:
        assert "Coinbase ID" in i
        i["Site"] = "Coinbase"
    USD_and_back = [
        i
        for i in transactions
        if (i["Transfer Total"] is not "" and i["Transfer Total"] is not None)
    ]
    return USD_and_back


def txs_from_coinbase(f):
    """
    :param f: a filelike object with CSV data
    :return:
    """
    dicts = from_coinbase(f)
    return [transaction.Transaction.FromCoinbaseJSON(i) for i in dicts]


class CoinbaseParser:
    def __init__(self, file_or_fname):
        self.txs = []
        if isinstance(file_or_fname, str):
            with open(file_or_fname) as f:
                self.txs = txs_from_coinbase(f)
        self.txs = txs_from_coinbase(file_or_fname)

    def __iter__(self):
        return self

    def __next__(self):
        if not self.txs:
            raise StopIteration
        return self.txs.pop(0)
